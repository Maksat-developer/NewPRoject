import logging
from aiogram import Bot, Dispatcher, executor, types
import aiogram
from aiogram.types import ContentType
import keyboards as kb
from config import API_TOKEN
import emoji




logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.from_user.id, """

    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω {0.first_name} —è –≥–æ—Ç–æ–≤–∞ —Å–ª—É–∂–∏—Ç—å –≤–∞–º \n 
    –ò –º–æ—è –ø–µ—Ä–≤–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–∞–ª–æ–≥–æ–≤
\n –ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–∞–ª–æ–≥–æ–≤ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '/Category'
     
     """.format(message.from_user)
    )

@dp.message_handler(commands=['Category'])
async def send_category_button(message: types.Message):
    await bot.send_message(message.from_user.id,"–ù–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–Ω–æ–ø–∫–∞—Ö!", reply_markup=kb.markup2)

@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await bot.send_message(message.from_user.id, "–ù—É–∂–Ω–∞ –ø–æ–º–æ—à—å?")


@dp.message_handler()
async def send_reply(message: types.Message):
    if message.text == "'–õ—ë–≥–∫–∏–π' –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—å—è –Ω–∏–∂–µ \n‚¨áÔ∏è":
        await message.reply("–Ø —Ä–∞–¥–∞ –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω, –∂–µ–ª–∞—é —É–¥–∞—á–∏ üòå", reply_markup=kb.markup3)
        await bot.send_message(message.from_user.id, "–õ—ë–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å –≤–∞–º \n –ö—Ç–æ —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤–µ—Å—å –∫–ª–∞–Ω –£—á–∏—Ö –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π -–ù–∞—Ä—É—Ç–æ")
    if message.text == "C) –ò—Ç–∞—á–∏ –∏ –û–±–∏—Ç–æ":
        await message.reply("–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω üòå")
    elif message.text == "B) –•–∞—à–∏—Ä–∞–º–∞":
        await message.reply("–û—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π")
    elif message.text == "A) –û–±–∏—Ç–æ":
        await message.reply("–í–∞–º –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω!")



    elif message.text == "'–°—Ä–µ–¥–Ω–∏–π' –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—å—è –Ω–∏–∂–µ \n‚¨áÔ∏è":
        await message.reply("–í–∏–∂—É –≤—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å –∫ –º–æ–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Ö–º–º... üòå", reply_markup=kb.markup4)
        await bot.send_message(message.from_user.id, "–°—Ä–µ–¥–Ω–µ—á—ë–∫ \n–ò —Ç–∞–∫ –ö—Ç–æ –±—ã–ª –ª–∏—á–Ω—ã–º –ø—Ä–∏–∑—ã–≤–æ–º —Ç—Ä–µ—Ç—å–µ–≥–æ –•–æ–∫–∞–≥–µ \n-–•–∏—Ä—É–∑–µ–Ω–∞ –°–∞—Ä—É—Ç–æ–±–∏")

    if message.text == "C) –≠–Ω–º–∞":
        await message.reply("–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω üòå")
    elif message.text == "B) –ì–∞–º–∞–±—É–Ω—Ç–∞":
        await message.reply("–û—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π")
    elif message.text == "A) –ë–∞–∫—É":
        await message.reply("–í–∞–º –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω!")


    elif message.text == "'–¢—è–∂—ë–ª—ã–π' –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—å—è –Ω–∏–∂–µ \n‚¨áÔ∏è":
        await message.reply("–¢—É—Ç –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥—É–º–∞—Ç—å –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω,\n –Ω–µ —É–∂ —Ç–æ –≤ Google –ø–æ–π–¥—ë—Ç–µ –∑–∞ –æ—Ç–≤–µ—Ç–æ–º –∞–∞...? üòå", reply_markup=kb.markup5)
        await bot.send_message(message.from_user.id, "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –∏–º–µ–ª–æ –∫–æ–ª—å—Ü–æ –ê–∫–∞—Ü—É–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –Ω–æ—Å–∏–ª–∞ \n-–ö–æ–Ω–∞–Ω ")

    if message.text == "A) –ë–µ–ª—ã–π":
        await message.reply("–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω üòå")
    elif message.text == "B) –ö—Ä–∞—Å–Ω—ã–π":
        await message.reply("–û—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π")
    elif message.text == "C) –û—Ä–∞–Ω–∂–µ–≤—ã–π":
        await message.reply("–í–∞–º –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω!")




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)